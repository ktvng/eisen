fn bad(a: obj, b: obj) -> c: obj {
    c = b
}

fn good(a: obj, b: obj) -> c: obj {
    c = a
}

fn pass(f: (obj) -> obj , b: obj) -> c: obj {
    let x = obj(4)
    c = f(x)
}

fn main() {
    let a = obj(12)
    let b = obj(19)
    let c = obj(5)

    let f = bad{a}
    let g = good{b}

    pass(g, c)
    // print("%i", pass(f, c))
    return
}

struct obj {
    x: int

    create(x: int) -> self: new obj {
        self.x = x
    }
}

/// [Test]
/// name = "e_funcarg"
/// info = """\
///     tests memory checking when passing in functions
/// """
/// [Expects]
/// success = false
/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 11"
