struct obj {
    var x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

fn one(a: obj, mut b: obj) -> r: obj{
    r = a
}

fn two(a: obj, mut b: obj) -> mut r: obj{
    r = b
}

fn main() {
    let a = obj(0)
    let mut b = obj(1)
    let var g = two
    g = one
    g(a, b)
}

/// [Test]
/// name = "bindings/function_reassign_ret"
/// info = """\
///     If a function returns a fixed obj, it can't be assigned to a reference
///     to a function which expects to return a mut obj.
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "IncompatibleBindingException"
/// contains = "21"
