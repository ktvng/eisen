fn pickFirst(a: obj, b: obj) -> c: obj {
    c = a
}

fn pickSecond(a: obj, b: obj) -> c: obj{
    c = b
}

fn test(b: obj, mut B: ptr, mut C: ptr) {
    let a = obj()
    let x = obj()
    let mut A = ptr(a)

    let var p1, var p2 = b, a
    let mut var P = A

    let var f = pickSecond

    if (true) {
        P = B
    }

    P.o = f(p1, p2)
}

struct obj {
    x: int

    create() -> new self: obj {
        self.x = 0
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

fn main() {
    let b = obj()
    let mut B = ptr(b)
    let mut C = ptr(b)

    test(b, B, C)
}

/// [Test]
/// name = "trace/superposition/three"
/// info = """\
///     Partial rewrite in a conditional fails
/// """

/// [Expects]
/// success = false
/// output = ""

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 23"
