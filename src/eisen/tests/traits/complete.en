trait sayer {
    say: (mut Self) -> void
    other: (Self) -> int
}

struct obj {
    x: int

    create() -> new self: obj {
        self.x = 0
    }
}

impl sayer for obj {
    fn say(mut self: obj) {
        print("hello %i", self.x)
    }
}

fn main() {
    let mut o = obj()
    o.as(sayer).say()
}

/// [Test]
/// name = "traits/complete"
/// info = "trait definition must be complete"

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "IncompleteTraitDefinitionException"
/// contains = ">> 14"
