struct obj {
    x: int

    create() -> new self: obj {
        self.x = 0
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

struct indirect {
    mut p: ptr

    create(mut p: ptr) -> new self: indirect {
        self.p = p
    }
}

fn main() {
    let b = obj()
    let mut B = ptr(b)
    let mut Bin = indirect(B)

    let c = obj()
    test(c, Bin)

    @compiler_assert(object_has_dependencies, B, "o: c")
}

fn test(b: obj, mut Bin: indirect) {
    let a = obj()
    test2(b, Bin)
}

fn test2(b: obj, mut Bin: indirect) {
    Bin.p.o = b
}

/// [Test]
/// name = "trace/angels/angels2"
/// info = """\
///     Angels map the correct dependency
/// """

/// [Expects]
/// success = true
/// output = ""
