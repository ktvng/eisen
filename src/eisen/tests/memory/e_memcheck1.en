struct ptr {
    var x: obj

    create(x: obj) -> new self: ptr {
        self.x = x
    }
}

fn select(a: obj, b: obj) -> c: obj {
    if (a.x < 4) {
        c = a
    }
    else {
        c = b
    }
}

fn cond(a: obj) -> c: obj {
    let var x: obj
    if (a.x == 4) {
        let y = obj(4)
        x = y
    }
}

fn one(a: obj, b: obj) -> var c: obj {
    let y = obj(5)
    c = select(a, b)
    c = select(a, y)
}

fn make_ptr(a: obj) -> new p: ptr {
    let y = obj(5)
    p = ptr(y)
    let p2 = ptr(y)
}

fn make_ptr2(a: obj) -> new p: ptr {
    p = ptr(a)
}


fn main() {
    let myObj = obj(0)
    let var a, b = myObj, myObj

    a = one(a, b)
    let new p: ptr
    p = make_ptr(a)

    let new p2: ptr
    p2 = make_ptr(a)
}

struct obj {
    var x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

/// [Test]
/// name = "e_memcheck1"
/// info = """\
///     tests for simple memory checking
/// """
/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 22"
/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 29"
/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 34"
