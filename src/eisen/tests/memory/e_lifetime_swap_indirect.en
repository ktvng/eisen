struct obj {
    x: int

    create(x: int) -> self: obj {
        self.x = x
    }
}

fn indirection1(o1: obj, o2: obj) -> ret: obj var {
    ret = indirection2(o1, o2)
}

fn indirection2(o1: obj, o2: obj) -> ret: obj var {
    var a, b = swap(o1, o2)
    a, b = swap(a, b)
    ret = a
}

fn select_o(o: obj) -> ret: obj var {
    let o3 = obj(3)
    ret = indirection1(o3, o)
}

fn swap(o1: obj, o2: obj) -> a: obj var, b: obj var {
    a = o2
    b = o1
}

fn main() {
    let o1 = obj(1)
    var o = select_o(o1)
}

/// [Test]
/// name = "memory/e_lifetime_swap_indirect"
/// info = """\
///     Test that after a local var is "tainted" such that it points to an object
///     which resides in the local scope, it can no longer be assigned to an object
///     of greater lifetime, even through multiple levels of indirection.
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 21"
