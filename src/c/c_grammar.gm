# ========================================================
#
# GrammarMaster (.gm)
#
# ========================================================
#
# TODO: Need to fix parsing of A-B as A and -B

SYMBOLICS
    <type>              ->  <regex>
    keyword void        ->  void
    keyword struct      ->  struct
    keyword if          ->  if
    keyword else        ->  else
    keyword while       ->  while
    keyword for         ->  for
    keyword return      ->  return
    keyword break       ->  break
    keyword continue    ->  continue

    symbol ,            ->  ,
    symbol {            ->  \s*{\s*
    symbol }            ->  }\s*
    symbol [            ->  \[
    symbol ]            ->  \]
    symbol (            ->  \(
    symbol )            ->  \)
    symbol ;            ->  ;[ \t\\n]*

    operator =          ->  =
    operator +=         ->  \+=
    operator -=         ->  -=
    operator *=         ->  \*=
    operator /=         ->  /=
    operator ?          ->  \?
    operator ==         ->  ==
    operator !=         ->  !=
    operator +          ->  \+
    operator -          ->  -
    operator /          ->  /
    operator *          ->  \*
    operator &          ->  &
    operator and        ->  &&
    operator or         ->  \|\|
    operator !          ->  !
    operator %          ->  %
    operator |          ->  \|
    operator <          ->  <
    operator >          ->  >
    operator <=         ->  <=
    operator >=         ->  >=
    operator .          ->  \.
    operator ->         ->  ->

    str                 ->  (["])(?:(?=(\\?))\2.)*?\1
    char                ->  '.'
    int                 ->  -?[0-9]+

    TAG                 ->  [_a-zA-Z]\w*
    none                ->  [ \t\n]*
    none                ->  [ \t]*\/\/.*?\n+
    none                ->  [ \t]*\/\/[^\n]*

STRUCTURE
    # ====================================================
    # Aliases

    OP_ASSIGN ->
        @action pass
        |   =
        |   +=
        |   -=
        |   *=
        |   /=

    LITERAL ->
        @action pass
        |   int
        |   str
        |   bool
        |   flt

    VAR ->
        @action convert ref
        |   TAG

    ENDLS ->
        @action pass
        | endl
        | endl ENDLS


    # ====================================================
    # Expressions

    E11 ->
        @action pass
        |   LITERAL
        |   VAR
        @action filter_pass
        |   ( E0 )

    E10 ->
        @action filter_build index
        |   E10 [ E0 ]
        @action build_operator
        |   E10 . TAG
        |   E10 -> TAG
        @action filter_build call
        |   E10 PARAMS
        @action pass
        |   E11

    E9 ->
        @action filter_build deref
        |   * E0
        @action pass
        |   E10

    E8 ->
        @action build_operator
        |   E8 * E9
        |   E8 / E9
        @action pass
        |   E9

    E7 ->
        @action build_operator
        |   E7 + E8
        |   E7 - E8
        @action pass
        |   E8

    E6 ->
        @action build_operator
        |   E6 < E7
        |   E6 <= E7
        |   E6 > E7
        |   E6 >= E7
        |   E6 == E7
        |   E6 != E7
        @action pass
        |   E7

    E5 ->
        @action handle_op_pref
        |   ! E5
        @action pass
        |   E6

    E4 ->
        @action build_operator
        |   E4 and E5
        |   E4 or E5
        @action pass
        |   E5

    E0 ->
        @action pass
        |   E4


    # ====================================================
    # TUPLES

    TAGS ->
        @action filter_build tags
        |   _TAGS

    PARAMS ->
        @action filter_build params
        |   ( )
        |   ( E0 )
        |   ( _E0S )


    # tuple of Expressions
    E0S ->
        @action filter_build tuple
        |   ( _E0S )
        |   _E0S

    _E0S ->
        @action pool
        |   E0 , E0
        |   E0 , _E0S


    # ====================================================
    # LValues

    L2 ->
        @action pass
        |   VAR
        @action filter_pass
        |   ( L0 )

    L1 ->
        @action build_operator
        |   L1 . TAG
        |   L1 -> TAG
        @action filter_build index
        |   L1 [ E0 ]
        @action pass
        |   L2

    L0 ->
       @action filter_build deref
        |   * L0
        @action pass
        |   L1

    L0S ->
        @action filter_build lvals
        |   _L0S

    _L0S ->
        @action pool
        |   L0 , L0
        |   L0 , _L0S


    # ====================================================
    # Assignment

    ASSIGNMENT ->
        @action build_operator
        |   L0 OP_ASSIGN E0

    DECL_ASSIGNMENT ->
        @action build_operator
        |   DECL = E0


    # ====================================================
    # DECL

    @action build type
    TYPE -> TYPE_

    TYPE_ ->
        @action pass
        |   TAG
        @action filter_build ptr
        |   TYPE_ *
        @action pass
        |   void

    STRUCT_DECL ->
        @action filter_build struct_decl
        |   struct TYPE TAG

    ARRAY_DECL ->
        @action filter_build array_decl
        |   TYPE TAG [ int ]
        |   TYPE TAG [ ]

    DECL ->
        @action pass
        |   STRUCT_DECL
        |   ARRAY_DECL
        @action filter_build decl
        |   TYPE TAG

    DECLS ->
        @action pool
        |   DECL
        |   DECL , DECLS


    # ====================================================
    # Control flow

    COND ->
        @action filter_build cond
        |   ( E0 ) SEQ

    CONTROL ->
        @action filter_build if
        |   IF_CONTEXT
        @action filter_build while
        |   while COND
        @action pass
        |   FOR_LOOP

    IF_CONTEXT ->
        @action pool
        |   if COND
        |   if COND ELSES

    ELSES ->
        @action pool
        |   else SEQ
        |   else if COND
        |   else if COND ELSES


    # ====================================================
    # For Loops

    FOR_LOOP ->
        @action filter_build for
        |   for ( DECL_ASSIGNMENT ; E0 ; ASSIGNMENT ) SEQ
        |   for ( ASSIGNMENT ; E0 ; ASSIGNMENT ) SEQ


    # ====================================================
    # Block

    SEQ ->
        @action filter_build seq
        |   { }
        |   { LINE }
        |   { LINES }

    RETURN ->
        @action filter_build return
        |   return E0


    # ====================================================
    # LINE

    LINE ->
        @action pass
        |   E0 ;
        |   ASSIGNMENT ;
        |   DECL_ASSIGNMENT ;
        |   DECL ;
        |   CONTROL
        |   RETURN ;

    LINES ->
        @action pool
        |   LINE LINE
        |   LINE LINES


    # ====================================================
    # Function Definitions

    FUNC ->
        @action filter_build def
        |   TYPE TAG ARGS SEQ

    ARGS ->
        @action filter_build args
        |   ( )
        |   ( DECL )
        |   ( DECLS )


    # ====================================================
    # Structs

    STRUCT ->
        @action filter_build struct
        |   struct TAG { STRUCT_ELEMS } ;

    STRUCT_ELEMS ->
        @action pool
        |   STRUCT_ELEM STRUCT_ELEMS
        |   STRUCT_ELEM

    STRUCT_ELEM ->
        @action pool
        |   DECL ;


    # ====================================================
    # Contexts

    CONTEXTS ->
        @action pool
        |   CONTEXT CONTEXTS
        |   CONTEXT

    CONTEXT ->
        @action pass
        |   FUNC
        |   STRUCT
        |   ENDLS


    ############################################################################
    # TESTING

    @action filter_build start
    START ->
        |   CONTEXTS
