struct obj {
    x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

fn indirect(a: obj, mut q: ptr) {
    let b = obj(2)
    let mut p = ptr(b)

    let mut x: ptr

    if (true) {
        p.o = a
        x = q
    }
    else {
        p.o = b
        x = q
    }

    x.o = p.o
}


fn main() {
    let a = obj(1)
    let mut q =ptr(a)
    indirect(a, q)
}

/// [Test]
/// name = "trace/superposition/shadow2"
/// info = """\
///     Detects issue with superposition
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = "Line 32:"
