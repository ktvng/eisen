struct obj {
    x: int

    create(x: int) -> self: obj {
        self.x = x
    }
}

fn select_o(o: obj) -> ret: obj var {
    let o3 = obj(3)
    var a, b = swap(o3, o)
    // a, b = swap(a, b)
    ret = a
}

fn swap(o1: obj, o2: obj) -> a: obj var, b: obj var {
    a = o2
    b = o1
}

fn main() {
    let o1 = obj(1)
    var o = select_o(o1)
}

/// [Test]
/// name = "memory/lifetime_swap"
/// info = """\
///     Test that a local pointer can be returned outside of a function, provided
///     that the local pointer points to objects with a lifetime greater than the
///     local function.
/// """

/// [Expects]
/// success = true
/// output = ""
