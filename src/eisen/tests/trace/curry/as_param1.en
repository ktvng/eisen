struct obj {
    x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

fn one(mut p: ptr, o: obj) {
    let o1 = obj(1)
    let h = add{p}
    apply(h, o1)
}

fn apply(f: (obj) -> void, o: obj) {
    let o3 = obj(3)
    f(o)
}

fn add(mut p: ptr, o: obj) {
    p.o = o
}

fn main() {
    let o = obj(0)
    let mut p = ptr(o)
    one(p, o)
    print("%i", p.o.x)
}

/// [Test]
/// name = "trace/curry/as_param1"
/// info = """\
///     Fails if dependency on younger
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = "Line 20:"
