struct obj {
    x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

struct ptr {
    var x: obj

    create(x: obj) -> new self: ptr {
        self.x = x
    }
}

fn taker(move o: ptr) {
    return
}

fn say(o: obj) {
    print("%i", o.x)
}

fn main() {
    let o = obj(0)
    let p = ptr(o)
    let var v = p
    taker(p)
    say(v.x)
    let k = v
}

/// [Test]
/// name = "moves/basic2"
/// info = "Reference invalidation occurs for methods and assignment"
/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ReferenceInvalidationException"
/// contains = ">> 30"
/// [[Expects.Exceptions]]
/// type = "ReferenceInvalidationException"
/// contains = ">> 31"
