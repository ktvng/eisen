struct obj {
    x: int

    create(x: int) -> self: new obj {
        self.x = x
    }
}

fn select_o(o: obj) -> ret: obj {
    let o3 = obj(3)
    var a, b = swap(o3, o)
    a, b = swap(a, b)
    ret = a
}

fn swap(o1: obj, o2: obj) -> a: obj, b: obj {
    a = o2
    b = o1
}

fn main() {
    let o1 = obj(1)
    var o = select_o(o1)
}
/// [Test]
/// name = "memory/e_lifetime_swap"
/// info = """\
///     Test that after a local var is "tainted" such that it points to an object
///     which resides in the local scope, it can no longer be assigned to an object
///     of greater lifetime.
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 13"
