struct obj {
    x: int

    create() -> new self: obj {
        self.x = 0
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

fn iter(mut p: ptr) -> x: obj {
    let n = obj()
    let mut r, mut s, mut t = ptr(p.o), ptr(p.o), ptr(n)

    while(true) {
        p.o = r.o
        r.o = s.o
        s.o = t.o
    }
}

fn main() {
    let o = obj()
    let mut p = ptr(o)
    let var a = iter(p)
}

/// [Test]
/// name = "trace/obj/while/assign_to_local_var2"
/// info = "Compiler detects memory violation after multiple iterations"

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 22"
