trait sayer {
    say: (mut Self) -> void
    other: (Self) -> int
}

struct obj {
    var x: int

    create() -> new self: obj {
        self.x = 0
    }
}

impl sayer for obj {
    fn say(mut self: obj) {
        self.x = 5
        print("hello %i", self.x)
    }

    fn other(self: obj) -> r: int {
        r = self.x
    }
}

fn main() {
    let mut o = obj()
    o.as(sayer).say()
    print(" %i", o.as(sayer).other())
}

/// [Test]
/// name = "traits/syntax3"
/// info = "return functions from traits work"

/// [Expects]
/// success = true
/// output = "hello 5 5"
