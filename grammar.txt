# ==========================================
# DOCUMENTATION
#
# NOTES:
#   - production rules must be all caps followed by '->'
#   - only line style comments are supported; use the hashtag.
#   - by convention, use plural iff the state can be repeated 1+ times
#   - the starting rule must begin with START.
#
# ACTIONS:
#   - pass passes node without creating
#   - merge creates unary/binary depending
#   - pool pools into a new list
#   - single rules should always pass
# ==========================================
# GRAMMAR

@action build=start
START -> CONTEXTS

@action pass
CONTEXTS -> CONTEXT
@action pool
CONTEXTS -> CONTEXT CONTEXTS

@action pass
CONTEXT -> FUNCTION_CONTEXT
CONTEXT -> CLASS_CONTEXT

@action build=class
CLASS_CONTEXT -> CLASS_HEADER CLASS_BODY

@action pass
CLASS_HEADER -> class var
CLASS_BODY -> { CLASS_ELEMENTS }

@action pool
CLASS_ELEMENTS -> CLASS_ELEMENT
CLASS_ELEMENTS -> CLASS_ELEMENT CLASS_ELEMENTS

@action pass
CLASS_ELEMENT -> CLASS_LINE endl
CLASS_ELEMENT -> CLASS_CONTEXT
CLASS_ELEMENT -> CLASS_FUNCTION_CONTEXT

@action build=class_function
CLASS_FUNCTION_CONTEXT -> FUNCTION_HEADER CODE_BLOCK

@action pass
CLASS_LINE -> VAR_DECL
CLASS_LINE -> VAR_DECL op_assign EXPR


@action build=function
FUNCTION_CONTEXT -> FUNCTION_HEADER CODE_BLOCK

@action pool
FUNCTION_HEADER -> fun var PARAMS_DECL
FUNCTION_HEADER -> fun var PARAMS_DECL RETURN_DECL

@action build=return_decl
RETURN_DECL -> -> PARAMS_DECL
RETURN_DECL -> -> VAR_DECL

@action build=params_decl
PARAMS_DECL -> ( VAR_DECL_TUPLE )
PARAMS_DECL -> ( )
PARAMS_DECL -> ( VAR_DECL )

@action pass
VAR_DECL_TUPLE_BUILDER -> VAR_DECL , VAR_DECL
@action pool
VAR_DECL_TUPLE_BUILDER -> VAR_DECL , VAR_DECL_TUPLE_BUILDER

@action build=var_decl_tuple
VAR_DECL_TUPLE -> VAR_DECL_TUPLE_BUILDER
VAR_DECL_TUPLE -> ( VAR_DECL_TUPLE_BUILDER )

@action build=codeblock
CODE_BLOCK -> { BLOCKS }

@action pass
BLOCKS -> BLOCK
@action pool
BLOCKS -> BLOCK BLOCKS

@action pass
BLOCK -> CONTROL
BLOCK -> LINE

@action pass
CONTROL -> IF_STATEMENT
CONTROL -> WHILE_STATEMENT

@action build=if_statement
IF_STATEMENT -> IF_CONTEXT

@action pool
IF_CONTEXT -> if ( EXPR ) CODE_BLOCK
IF_CONTEXT -> if ( EXPR ) CODE_BLOCK ELSE_STATEMENT 

ELSE_STATEMENT -> else CODE_BLOCK
ELSE_STATEMENT -> else if ( EXPR ) CODE_BLOCK ELSE_STATEMENT
ELSE_STATEMENT -> else if ( EXPR ) CODE_BLOCK

@action build=while_statement
WHILE_STATEMENT -> while ( EXPR ) CODE_BLOCK 

@action merge
VAR_DECL -> VAR_NAME_TUPLE : var
VAR_DECL -> var : var

@action build=var_name_tuple
VAR_NAME_TUPLE -> VAR_NAME_TUPLE_BUILDER

@action pool
VAR_NAME_TUPLE_BUILDER -> var , var
VAR_NAME_TUPLE_BUILDER -> var , VAR_NAME_TUPLE_BUILDER

@action build=let
LET_VAR_DECL -> let VAR_DECL

@action pass
LINE -> ACTION endl

@action pass
ACTION -> LET_VAR_DECL

@action merge
ACTION -> VAR_DECL_TUPLE op_assign TUPLE

ACTION -> VAR_NAME_TUPLE op_assign TUPLE

ACTION -> LET_VAR_DECL op_assign EXPR
ACTION -> LET_VAR_DECL op_assign TUPLE
ACTION -> VAR_DECL op_assign EXPR
ACTION -> VAR_DECL op_assign TUPLE
ACTION -> var op_assign EXPR

@action pass
ACTION -> EXPR
ACTION -> return

@action merge
EXPR -> EXPR op_bin EXPR
EXPR -> op_unary_pref EXPR
EXPR -> EXPR op_unary_post
EXPR -> EXPR . var
EXPR -> EXPR . FUNCTION_CALL

@action pass
EXPR -> FUNCTION_CALL
EXPR -> ( EXPR )

@action build=function_call
FUNCTION_CALL -> var PARAMS

@action build=params
PARAMS -> ( )
PARAMS -> ( EXPR )
PARAMS -> ( TUPLE_BUILDER )
PARAMS -> ( TUPLE_BUILDER , NAMED_PARAMS )
PARAMS -> ( NAMED_PARAMS )

@action merge
NAMED_PARAM -> var = EXPR

@action pool
NAMED_PARAMS -> NAMED_PARAM , NAMED_PARAMS

@action build=tuple
TUPLE -> TUPLE_BUILDER
TUPLE -> ( TUPLE_BUILDER )

@action pool
TUPLE_BUILDER -> EXPR , EXPR
@action pool
TUPLE_BUILDER -> EXPR , TUPLE_BUILDER

@action pass
EXPR -> var
EXPR -> literal
