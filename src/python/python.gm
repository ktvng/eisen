# ========================================================
#
# GrammarMaster (.gm)
#
# ========================================================

SYMBOLICS
    <type>              ->  <regex>
    keyword def         ->  def
    keyword class       ->  class
    keyword if          ->  if
    keyword elif        ->  \s*elif
    keyword else        ->  \s*else
    keyword while       ->  while
    keyword for         ->  for
    keyword return      ->  return
    keyword None        ->  None
    keyword is          ->  is
    keyword in          ->  in
    keyword init        ->  __init__

    symbol @            ->  @
    symbol ,            ->  ,\s*
    symbol {            ->  \s*{\s*
    symbol }            ->  \s*}
    symbol [            ->  \[
    symbol ]            ->  \]
    symbol (            ->  \(\s*
    symbol )            ->  \s*\)
    symbol endl         ->  \n\s*

    operator =          ->  =
    operator +=         ->  \+=
    operator -=         ->  -=
    operator *=         ->  \*=
    operator /=         ->  /=
    operator ?          ->  \?
    operator ==         ->  ==
    operator !=         ->  !=
    operator +          ->  \+
    operator -          ->  -
    operator /          ->  /
    operator *          ->  \*
    operator and        ->  and
    operator or         ->  or
    operator not        ->  not
    operator %          ->  %
    operator |          ->  \|
    operator <          ->  <
    operator >          ->  >
    operator <=         ->  <=
    operator >=         ->  >=
    operator .          ->  \.
    operator :          ->  :\s*

    str                 ->  (["'])(?:(?=(\\?))\2.)*?\1
    int                 ->  -?[0-9]+
    bool                ->  True|False

    TAG                 ->  [_a-zA-Z]+
    none                ->  [ \t]*
    none                ->  [ \t]*\/\/.*?\n+
    none                ->  [ \t]*\/\/[^\n]*


STRUCTURE
    # ====================================================
    # Aliases

    OP_ASSIGN ->
        @action pass
        |   =
        |   <-
        |   +=
        |   -=
        |   *=
        |   /=

    LITERAL ->
        @action pass
        |   int
        |   str
        |   bool
        |   flt
        |   nil

    VAR ->
        @action convert ref
        |   TAG

    ENDLS ->
        @action pass
        | endl
        | endl ENDLS


    # ====================================================
    # Expressions

    E10 ->
        @action build_operator
        |   E10 . TAG
        @action filter_build unpack
        |   * VAR
        @action build call
        |   E10 PARAMS
        @action pass
        |   LITERAL
        |   VAR
        |   E0_LST
        @action filter_pass
        |   ( E0 )

    E9 ->
        @action filter_build index
        |   E9 [ E0 ]
        @action pass
        |   E10

    E8 ->
        @action build_operator
        |   E8 * E9
        |   E8 / E9
        @action pass
        |   E9

    E7 ->
        @action build_operator
        |   E7 + E8
        |   E7 - E8
        @action pass
        |   E8

    E6 ->
        @action build_operator
        |   E6 < E7
        |   E6 <= E7
        |   E6 > E7
        |   E6 >= E7
        |   E6 == E7
        |   E6 != E7
        @action pass
        |   E7

    E5 ->
        @action handle_op_pref
        |   not E5
        @action pass
        |   E6

    E4 ->
        @action build_operator
        |   E4 and E5
        |   E4 or E5
        @action pass
        |   E5

    E3 ->
        @action filter_build is
        |   E3 is TAG
        |   E3 is None
        @action pass
        |   E4

    E0 ->
        @action pass
        |   E3


    # ====================================================
    # TUPLES

    PARAMS ->
        @action filter_build params
        |   ( )
        |   ( E0 )
        |   ( _E0S )
        |   ( E0 , KV )
        |   ( E0 , _KVS )
        |   ( _E0S , KV )
        |   ( _E0S , _KVS )

    KV ->
        @action filter_build named
        |   TAG = E0

    _KVS ->
        @action pool
        |   KV , KV
        |   KV , _KVS

    # tuple of tags
    _TAGS ->
        @action pool
        |   TAG , TAG
        |   TAG , _TAGS

    # list of Expressions
    E0_LST ->
        @action filter_build list
        |   [ _E0S ]
        |   [ ]

    # tuple of Expressions
    E0S ->
        @action filter_build tuple
        |   ( _E0S )
        |   _E0S

    _E0S ->
        @action pool
        |   E0 , E0
        |   E0 , _E0S


    # ====================================================
    # LValues

    L1 ->
        @action pass
        |   VAR

    L0 ->
        @action build_operator
        |   L0 . TAG
        @action pass
        |   L1

    L0S ->
        @action filter_build lvals
        |   _L0S

    _L0S ->
        @action pool
        |   L0 , L0
        |   L0 , _L0S


    # ====================================================
    # Assignment

    ASSIGNMENT ->
        @action build_operator
        |   L0 OP_ASSIGN E0
        |   L0S OP_ASSIGN E0S
        |   L0S OP_ASSIGN E0

    # ====================================================
    # LINE

    LINE ->
        @action pass
        |   E0
        |   ASSIGNMENT
        |   CONTROL
        @action filter_build return
        |   return
        |   return E0
        |   return E0S


    # ====================================================
    # Block

    SEQ ->
        @action filter_build seq
        |   { }
        |   { LINE }
        |   { LINES }

    LINES ->
        @action pool
        |   LINE ENDLS LINE
        |   LINE ENDLS LINES


    # ====================================================
    # Control flow

    COND ->
        @action filter_build cond
        |   E0 : SEQ

    CONTROL ->
        @action filter_build if
        |   IF_CONTEXT
        @action filter_build while
        |   while COND
        @action filter_build for
        |   for TAG in E0 : SEQ

    IF_CONTEXT ->
        @action pool
        |   if COND
        |   if COND ELSES

    ELSES ->
        @action pool
        |   else : SEQ
        |   elif COND
        |   elif COND ELSES


    # ====================================================
    # Function Definitions

    FUNC ->
        @action filter_build def
        |   def TAG ARGS : SEQ

    VARGS ->
        @action filter_build vargs
        |   * TAG

    ARGS ->
        @action filter_build args
        |   ( )
        |   ( TAG )
        |   ( VARGS )
        |   ( TAG , VARGS )
        |   ( _TAGS )
        |   ( _TAGS , VARGS )

    # ====================================================
    # Classes

    CLASS ->
        @action filter_build class
        |   class TAG : { CLASS_ELEMS }

    CLASS_ELEMS ->
        @action pool
        |   CLASS_ELEM ENDLS CLASS_ELEMS
        |   CLASS_ELEM

    CLASS_ELEM ->
        @action filter_build init
        |   def init ARGS : SEQ
        @action filter_build def
        |   def TAG ARGS : SEQ


    # ====================================================
    # Program

    CONTEXTS ->
        @action pool
        |   CONTEXT ENDLS CONTEXTS
        |   CONTEXT

    CONTEXT ->
        @action pass
        |   FUNC
        |   CLASS
        |   LINE


    START ->
        @action build start
        |   CONTEXTS
