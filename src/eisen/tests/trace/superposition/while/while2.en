struct obj {
    x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> new self: ptr {
        self.o = o
    }
}

fn indirect(x: obj, mut X: ptr) {
    let mut y = obj(0)
    let mut Y = ptr(y)

    let var a, var b, var c = x, x, y
    let mut var A, mut var B, mut var C = X, X, Y


    while (false) {
        A = B
        B = C

        a = b
        b = c
    }

    A.o = b
}

fn main() {
    let mut x = obj(0)
    let mut X = ptr(x)
    indirect(x, X)
}

/// [Test]
/// name = "trace/superposition/while/while2"
/// info = """\
///     Crossing entanglements is bad
/// """

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = "Line 33:"
