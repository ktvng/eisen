# ========================================================
#
# GrammarMaster (.gm)
#
# ========================================================
#
# Define a general purpose grammar for your language and
# specify everything you need with a .gm file.
#
# Subtleties:
#   We leave deducing how the important bits work to the
#   reader! (It's intuitive, trust)
#
#   Two sections: 'SYMBOLICS' for lexing and 'STRUCTURE'
#   for the context free grammar rules.
#
#   'SYMBOLICS' works by alignment of the '->' symbol.
#       - This is defined by the line
#               <regex> -> <type> <value>
#         and only the position of the '->' matters.
#
#       - This means that indentation matters, in this
#         section only!
#
#       - All values are stripped, so if you want spaces
#         in your regex, figure it out.
#
#       - If no value is supplied, then the value of the
#         regex (if matched) is used for the token.
#
#       - A type of 'none' will not add the token during
#         lexing
#
#
#   'STRUCTURE' uses annotations (e.g '@action ...') to
#   define the reversal of CFG rules during parsing.
#       - The most recent annotation is used for each
#         CFG rule, so you don't have to keep writing
#         annotations all the time.
#
#       - Only '@action build' takes another argument
#         which is the name of the node you want to build.
#
#       - Currently '|' bars must be multiline only. Sorry
#         :(
#
#       - Indentation doesn't really matter, but do it
#         anyways.
#
# ========================================================
# ========================================================

SYMBOLICS
    <type>              ->  <regex>
    keyword fn          ->  fn
    keyword struct      ->  struct
    keyword if          ->  if
    keyword else        ->  else
    keyword while       ->  while
    keyword let         ->  let
    keyword return      ->  return
    keyword mod         ->  mod
    keyword create      ->  create
    keyword destroy     ->  destroy
    keyword var         ->  var
    keyword val         ->  val
    keyword nil         ->  nil
    keyword interface   ->  interface
    keyword implements  ->  implements
    keyword variant     ->  variant
    keyword of          ->  of
    keyword as          ->  as
    keyword is          ->  is
    keyword embed       ->  embed

    symbol @            ->  @
    symbol ,            ->  ,
    symbol {            ->  \s*{\s*
    symbol }            ->  }\s*
    symbol [            ->  \[
    symbol ]            ->  \]
    symbol (            ->  \(
    symbol )            ->  \)
    symbol endl         ->  \n\s*

    operator =          ->  =
    operator :=         ->  :=
    operator <-         ->  <-
    operator +=         ->  \+=
    operator -=         ->  -=
    operator *=         ->  \*=
    operator /=         ->  /=
    operator ?          ->  \?
    operator ==         ->  ==
    operator !=         ->  !=
    operator +          ->  \+
    operator -          ->  -
    operator /          ->  /
    operator *          ->  \*
    operator and        ->  (&&|and)
    operator or         ->  (\|\||or)
    operator !          ->  (!|not)
    operator %          ->  %
    operator |          ->  \|
    operator <          ->  <
    operator >          ->  >
    operator <=         ->  <=
    operator >=         ->  >=
    operator .          ->  \.
    operator ::         ->  ::
    operator ->         ->  ->
    operator :          ->  :

    str                 ->  (["'])(?:(?=(\\?))\2.)*?\1
    int                 ->  -?[0-9]+
    bool                ->  true|false

    TAG                 ->  [_a-zA-Z]\w*
    none                ->  [ \t]*
    none                ->  [ \t]*\/\/.*?\n+
    none                ->  [ \t]*\/\/[^\n]*


STRUCTURE
    # ====================================================
    # Aliases

    OP_ASSIGN ->
        @action pass
        |   =
        |   :=
        |   <-
        |   +=
        |   -=
        |   *=
        |   /=

    LITERAL ->
        @action pass
        |   int
        |   str
        |   bool
        |   flt
        |   nil

    VAR ->
        @action convert ref
        |   TAG

    ENDLS ->
        @action pass
        | endl
        | endl ENDLS


    # ====================================================
    # Typing

    TYPE ->
        @action filter_build type
        |   TAG
        @action filter_build var_type
        |   TAG var
        @action filter_build var_type?
        |   TAG var?
        |   TAG ?
        @action pass
        |   FN_TYPE

    TYPES ->
        @action filter_build prod_type
        |   _TYPES

    _TYPES ->
        @action pool
        |   TYPE , _TYPES
        |   TYPE , TYPE

    FN_TYPE ->
        @action filter_build fn_type
        |   FN_TYPE_IN FN_TYPE_OUT

    FN_TYPE_IN ->
        @action filter_build fn_type_in
        |   ( TYPES )
        |   ( TYPE )
        |   ( )

    FN_TYPE_OUT ->
        @action filter_build fn_type_out
        |   -> TYPE
        |   -> ( TYPES )

    TYPING ->
        @action build_operator
        |   TAGS : TYPE
        |   TAG : TYPE

    TEMPORARY_FIX1 ->
        @action filter_build prod_type
        |   TYPINGS

    TYPINGS ->
        @action pool
        |   TYPING , TYPING
        |   TYPING , TYPINGS


    # ====================================================
    # Expressions

    E11 ->
        @action build_operator
        |   E11 :: TAG
        |   TAG :: TAG

    E10 ->
        @action build_operator
        |   E10 . TAG
        @action build raw_call
        |   E10 PARAMS
        @action filter_build cast
        |   E10 . as ( TYPE )
        @action pass
        |   E11
        |   LITERAL
        |   VAR
        @action filter_pass
        |   ( E0 )


    E8 ->
        @action build_operator
        |   E8 * E10
        |   E8 / E10
        @action pass
        |   E10

    E7 ->
        @action build_operator
        |   E7 + E8
        |   E7 - E8
        @action pass
        |   E8

    E6 ->
        @action build_operator
        |   E6 < E7
        |   E6 <= E7
        |   E6 > E7
        |   E6 >= E7
        |   E6 == E7
        |   E6 != E7
        @action pass
        |   E7

    E5 ->
        @action handle_op_pref
        |   ! E5
        @action pass
        |   E6

    E4 ->
        @action build_operator
        |   E4 and E5
        |   E4 or E5
        @action pass
        |   E5

    E3 ->
        @action filter_build is
        |   E3 is TAG
        |   E3 is nil
        @action pass
        |   E4

    E0 ->
        @action pass
        |   E3


    # ====================================================
    # TUPLES

    TAGS ->
        @action filter_build tags
        |   _TAGS

    # tuple of tags
    _TAGS ->
        @action pool
        |   TAG , TAG
        |   TAG , _TAGS


    # tuple of Expressions
    E0S ->
        @action filter_build tuple
        |   ( _E0S )
        |   _E0S

    _E0S ->
        @action pool
        |   E0 , E0
        |   E0 , _E0S


    # ====================================================
    # LValues

    L2 ->
        @action pass
        |   VAR

    L1 ->
        @action build_operator
        |   L1 :: TAG
        @action pass
        |   L2

    L0 ->
        @action build_operator
        |   L0 . TAG
        @action pass
        |   L1

    L0S ->
        @action filter_build lvals
        |   _L0S

    _L0S ->
        @action pool
        |   L0 , L0
        |   L0 , _L0S


    # ====================================================
    # Assignment

    ASSIGNMENT ->
        @action build_operator
        |   L0 OP_ASSIGN E0
        |   L0S OP_ASSIGN E0S
        |   L0S OP_ASSIGN E0

    INFERENCE ->
        @action pool
        |   TAGS OP_ASSIGN E0S
        |   TAGS OP_ASSIGN E0
        |   TAG OP_ASSIGN E0


    # ====================================================
    # DECL

    DECL ->
        @action convert_decl let
        |   let TYPING
        @action convert_decl var
        |   var TYPING
        @action convert_decl var?
        |   var ? TYPING
        @action convert_decl val
        |   val TYPING

        @action filter_build ilet
        |   let INFERENCE
        @action filter_build ivar
        |   var INFERENCE
        @action filter_build ivar?
        |   var ? INFERENCE


    # ====================================================
    # LINE

    LINE ->
        @action pass
        |   E0 ENDLS
        |   ASSIGNMENT ENDLS
        |   DECL ENDLS
        |   return ENDLS
        |   CONTROL

    PARAMS ->
        @action filter_build params
        |   ( )
        |   ( E0 )
        |   ( _E0S )


    # ====================================================
    # Block

    SEQ ->
        @action filter_build seq
        |   { }
        |   { LINE }
        |   { LINES }

    LINES ->
        @action pool
        |   LINE LINE
        |   LINE LINES


    # ====================================================
    # Control flow

    COND ->
        @action filter_build cond
        |   ( E0 ) SEQ

    CONTROL ->
        @action filter_build if
        |   IF_CONTEXT
        @action filter_build while
        |   while COND

    IF_CONTEXT ->
        @action pool
        |   if COND
        |   if COND ELSES

    ELSES ->
        @action pool
        |   else SEQ
        |   else if COND
        |   else if COND ELSES


    # ====================================================
    # Function Definitions

    FUNC ->
        @action build_def
        |   fn TAG ARGS SEQ
        |   fn TAG ARGS RETS SEQ

    ARGS ->
        @action filter_build args
        |   ( )
        |   ( TYPING )
        |   ( TEMPORARY_FIX1 )

    RETS ->
        @action filter_build rets
        |   -> TYPING
        |   -> TEMPORARY_FIX1


    # ====================================================
    # Structs

    STRUCT ->
        @action filter_build struct
        |   struct TAG IMPLS { STRUCT_ELEMS }
        |   struct TAG { STRUCT_ELEMS }
        |   struct TAG { }

    IMPLS ->
        @action filter_build impls
        |   implements TAG
        |   implements TAGS

    STRUCT_ELEMS ->
        @action pool
        |   STRUCT_ELEM STRUCT_ELEMS
        |   STRUCT_ELEM

    STRUCT_ELEM ->
        @action pool
        |   TYPING ENDLS
        |   FUNC
        @action filter_build create
        |   create ARGS RETS SEQ
        @action filter_build destroy
        |   destroy ARGS SEQ
        @action filter_build embed
        |   embed TAG ENDLS
        |   embed TAGS ENDLS


    # ====================================================
    # Interfaces

    INTERFACE ->
        @action filter_build interface
        |   interface TAG { INTERFACE_ELEMS }

    INTERFACE_ELEMS ->
        @action pool
        |   INTERFACE_ELEM INTERFACE_ELEMS
        |   INTERFACE_ELEM

    INTERFACE_ELEM ->
        @action pool
        |   TYPING ENDLS


    # ====================================================
    # Variants

    VARIANT ->
        @action filter_build variant
        |   variant TAG of TAG { VARIANT_ELEMS }

    VARIANT_ELEMS ->
        @action pool
        |   VARIANT_ELEM VARIANT_ELEMS
        |   VARIANT_ELEM

    VARIANT_ELEM ->
        @action filter_build is_fn
        |   is ARGS RETS SEQ
        @action filter_build @
        |   @ TAG ( TAGS ) ENDLS
        |   @ TAG ( TAG ) ENDLS
        |   @ TAG ( ) ENDLS


    # ====================================================
    # Modules

    MOD ->
        @action filter_build mod
        |   mod TAG { CONTEXTS }
        |   mod TAG {  }

    CONTEXTS ->
        @action pool
        |   CONTEXT CONTEXTS
        |   CONTEXT

    CONTEXT ->
        @action pass
        |   FUNC
        |   STRUCT
        |   INTERFACE
        |   VARIANT
        |   MOD


    # ====================================================
    # Program

    START ->
        @action build start
        |   CONTEXTS
