# ========================================================
#
# GrammarMaster (.gm) 
#
# ========================================================
#
# Define a general purpose grammar for your language and 
# specify everything you need with a .gm file.
# 
# Subtleties:
#   We leave deducing how the important bits work to the 
#   reader! (It's intuitive, trust)
#
#   Two sections: 'SYMBOLICS' for lexing and 'STRUCTURE'
#   for the context free grammar rules.
#   
#   'SYMBOLICS' works by alignment of the '->' symbol. 
#       - This is defined by the line
#               <regex> -> <type> <value>
#         and only the position of the '->' matters.
#
#       - This means that indentation matters, in this
#         section only!
#
#       - All values are stripped, so if you want spaces
#         in your regex, figure it out.
#
#       - If no value is supplied, then the value of the
#         regex (if matched) is used for the token.
#
#       - A type of 'none' will not add the token during
#         lexing
#
#
#   'STRUCTURE' uses annotations (e.g '@action ...') to 
#   define the reversal of CFG rules during parsing.
#       - The most recent annotation is used for each
#         CFG rule, so you don't have to keep writing 
#         annotations all the time.
#
#       - Only '@action build' takes another argument 
#         which is the name of the node you want to build.
#
#       - Currently '|' bars must be multiline only. Sorry
#         :(
#
#       - Indentation doesn't really matter, but do it 
#         anyways.    
#
# ========================================================
# ========================================================

SYMBOLICS
    <type>              ->  <regex>
    keyword fn          ->  fn
    keyword class       ->  class
    keyword this        ->  this
    keyword if          ->  if
    keyword else        ->  else
    keyword while       ->  while
    keyword let         ->  let
    keyword return      ->  return
    keyword module      ->  mod

    symbol ,            ->  ,
    symbol {            ->  \s*{\s* 
    symbol }            ->  }\s* 
    symbol [            ->  \[
    symbol ]            ->  \]
    symbol (            ->  \(
    symbol )            ->  \)
    symbol endl         ->  \n\s*

    operator =          ->  =      
    operator :=         ->  :=     
    operator <-         ->  <-     
    operator +=         ->  \+=    
    operator -=         ->  -=     
    operator *=         ->  \*=    
    operator /=         ->  /=     
    operator ?          ->  \?     
    operator ==         ->  ==     
    operator !=         ->  !=     
    operator +          ->  \+     
    operator -          ->  -      
    operator /          ->  /      
    operator *          ->  \*     
    operator &&         ->  &&     
    operator ||         ->  \|\|   
    operator !          ->  !      
    operator %          ->  %      
    operator |          ->  \|     
    operator <          ->  <      
    operator >          ->  >      
    operator <=         ->  <=     
    operator >=         ->  >=     
    operator .          ->  \.     
    operator ::         ->  ::     
    operator ->         ->  ->     
    operator :          ->  :      

    string              ->  (["'])(?:(?=(\\?))\2.)*?\1
    int                 ->  -?[0-9]+  
    bool                ->  true|false
    
    TAG                 ->  [_a-zA-Z]\w*
    none                ->  [ |\t]*
    none                ->  [ |\t]*\/\/.*?\n+
    none                ->  [ |\t]*\/\/[^\n]*

    
STRUCTURE
    @action filter_build context
    START -> 
        |   ENDLS CONTEXTS
        |   CONTEXTS

    @action pass
    START -> MODULE

    @action filter_build module
    MODULE -> 
        |   module TAG { CONTEXTS }
        |   module TAG { ENDLS CONTEXTS }
        |   module TAG { MODULE }

    @action pass
    OP_ASSIGN ->
        |   =
        |   :=

    @action pass 
    OP_BIN ->
        |   +
        |   -
        |   /
        |   *
        |   <
        |   >
        |   <=
        |   >=
        |   ==
        |   !=
        |   +=
        |   -=
        |   *=
        |   /=

    @action pool
    CONTEXTS -> 
        |   CONTEXT
        |   CONTEXT CONTEXTS

    @action pass
    CONTEXT -> 
        |   FUNCTION_CONTEXT
        |   CLASS_CONTEXT

    @action filter_build class
    CLASS_CONTEXT -> CLASS_HEADER CLASS_BODY

    @action pass
    CLASS_HEADER -> class VAR
    CLASS_BODY -> { CLASS_ELEMENTS }

    @action pool
    CLASS_ELEMENTS -> 
        |   CLASS_ELEMENT
        |   CLASS_ELEMENT CLASS_ELEMENTS

    @action pass
    CLASS_ELEMENT -> 
        |   CLASS_LINE ENDLS
        |   CLASS_CONTEXT
        |   CLASS_FUNCTION_CONTEXT

    @action filter_build class_function
    CLASS_FUNCTION_CONTEXT -> FUNCTION_HEADER CODE_BLOCK

    @action pass
    CLASS_LINE ->
        |   VAR_DECL
        |   VAR_DECL OP_ASSIGN EXPR

    @action filter_build function
    FUNCTION_CONTEXT -> FUNCTION_HEADER CODE_BLOCK

    @action pool
    FUNCTION_HEADER ->
        |   fn TAG PARAMS_DECL
        |   fn TAG PARAMS_DECL RETURN_DECL

    @action filter_build return_decl
    RETURN_DECL -> 
        |   -> PARAMS_DECL
        |   -> VAR_DECL

    @action filter_build params_decl
    PARAMS_DECL ->
        |   ( VAR_DECL_TUPLE )
        |   ( VAR_DECL )
        |   ( )

    @action pool
    VAR_DECL_TUPLE_BUILDER ->
        |   VAR_DECL , VAR_DECL
        |   VAR_DECL , VAR_DECL_TUPLE_BUILDER

    @action filter_build var_decl_tuple
    VAR_DECL_TUPLE ->
        |   VAR_DECL_TUPLE_BUILDER
        |   ( VAR_DECL_TUPLE_BUILDER )

    @action filter_build codeblock
    CODE_BLOCK -> { BLOCKS }

    @action pool
    BLOCKS ->
        |   BLOCK
        |   BLOCK BLOCKS

    @action pass
    BLOCK ->
        |   CONTROL
        |   LINE

    CONTROL ->
        |   IF_STATEMENT
        |   WHILE_STATEMENT

    @action filter_build if_statement
    IF_STATEMENT -> IF_CONTEXT

    @action pool
    IF_CONTEXT ->
        |   if ( EXPR ) CODE_BLOCK
        |   if ( EXPR ) CODE_BLOCK ELSE_STATEMENT

    ELSE_STATEMENT ->
        |   else CODE_BLOCK
        |   else if ( EXPR ) CODE_BLOCK ELSE_STATEMENT
        |   else if ( EXPR ) CODE_BLOCK

    @action filter_build while_statement
    WHILE_STATEMENT -> while ( EXPR ) CODE_BLOCK

    @action merge
    VAR_DECL -> 
        |   VAR_NAME_TUPLE : TAG
        |   TAG : TAG

    @action filter_build var_name_tuple
    VAR_NAME_TUPLE -> VAR_NAME_TUPLE_BUILDER

    @action pool
    VAR_NAME_TUPLE_BUILDER -> 
        |   TAG , TAG
        |   TAG , VAR_NAME_TUPLE_BUILDER

    @action filter_build let
    LET_VAR_DECL -> let VAR_DECL

    @action pass
    LINE -> ACTION ENDLS
    ACTION -> LET_VAR_DECL

    @action merge
    ACTION -> 
        |   VAR_DECL_TUPLE OP_ASSIGN TUPLE
        |   LET_VAR_DECL OP_ASSIGN EXPR
        |   LET_VAR_DECL OP_ASSIGN TUPLE
        |   VAR_DECL OP_ASSIGN EXPR
        |   VAR_DECL OP_ASSIGN TUPLE
        |   VAR OP_ASSIGN EXPR
        |   TUPLE OP_ASSIGN EXPR
        |   TUPLE OP_ASSIGN TUPLE

    @action pass
    ACTION -> 
        |   EXPR

    @action filter_build return
    ACTION ->
        |   return 

    @action merge
    EXPR -> 
        |   EXPR OP_BIN EXPR
        |   EXPR . VAR
        |   EXPR . FUNCTION_CALL

    @action pass
    EXPR ->
        |   FUNCTION_CALL
        |   EXPR -> ( EXPR )

    @action filter_build function_call
    FUNCTION_CALL -> VAR PARAMS

    @action filter_build params
    PARAMS ->
        |   ( )
        |   ( EXPR )
        |   ( TUPLE_BUILDER )
        |   ( TUPLE_BUILDER, NAMED_PARAMS )
        |   ( NAMED_PARAMS )

    @action merge
    NAMED_PARAM -> VAR = EXPR

    @action pool
    NAMED_PARAMS -> 
        |   NAMED_PARAM
        |   NAMED_PARAM , NAMED_PARAMS

    @action filter_build tuple
    TUPLE -> 
        |   TUPLE_BUILDER
        |   ( TUPLE_BUILDER )

    @action pool
    TUPLE_BUILDER ->
        |   EXPR , EXPR
        |   EXPR , TUPLE_BUILDER

    @action pass
    EXPR ->
        |   VAR
        |   LITERAL

    @action pass
    LITERAL ->
        |   int
        |   string
        |   bool
        |   float

    @action convert var
    VAR -> TAG

    @action pass
    ENDLS ->
        | endl
        | endl ENDLS


    # TESTING
    @action build start
    START -> TESTING1 ( )

    @action build t1
    TESTING1 -> TAG + TESTING1

    @action pass
    TESTING1 -> TAG

    @action pass
    TESTING1 -> TESTING2

    @action build t2
    TESTING2 -> TAG * TESTING2

    @action pass
    TESTING2 -> TAG

