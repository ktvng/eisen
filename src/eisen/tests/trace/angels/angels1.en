struct obj {
    x: int

    create() -> self: new obj {
        self.x = 0
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> self: new ptr {
        self.o = o
    }
}

struct indirect {
    mut p: ptr

    create(p: mut ptr) -> self: new indirect {
        self.p = p
    }
}

fn main() {
    let b = obj()
    let B = ptr(b)
    let Bin = indirect(B)

    test(b, Bin)
}

fn test(b: obj, Bin: mut indirect) {
    let a = obj()
    test2(a, Bin)
}

fn test2(b: obj, Bin: mut indirect) {
    Bin.p.o = b
}

/// [Test]
/// name = "trace/angels/angels1"
/// info = """\
///     Test angels
/// """

/// [Expects]
/// success = false
/// output = ""

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = "Line 35:"
