struct obj {
    x: int

    create() -> self: new obj {
        self.x = 0
    }
}

struct ptr {
    var o: obj

    create(o: obj) -> self: new ptr {
        self.o = o
    }
}

fn iter(p: mut ptr) -> x: obj {
    let n = obj()
    var r, s, t = p.o, p.o, n

    while(true) {
        p.o = r
        r = s
        s = t
    }
}

fn main() {
    let o = obj()
    let p = ptr(o)
    var a = iter(p)
}

/// [Test]
/// name = "trace/obj/while/assign_to_local_var"
/// info = "Compiler detects memory violation after multiple iterations"

/// [Expects]
/// success = false

/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 22"
