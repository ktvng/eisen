SYMBOLICS
    <type>              ->  <regex>
    keyword :func       ->  :func
    keyword :tupl       ->  :tupl
    keyword :mayb       ->  :mayb
    keyword :novl       ->  :novl
    keyword :struct     ->  :struct
    symbol :            ->  :
    symbol ,            ->  ,
    symbol |            ->  \|
    symbol (            ->  \(
    symbol )            ->  \)
    symbol <            ->  <
    symbol >            ->  >
    symbol #            ->  #
    symbol [            ->  \[
    symbol ]            ->  \]
    symbol ->           ->  ->
    symbol :=           ->  :=

    TAG                 ->  [_a-zA-Z]\w*
    none                ->  [ \t\n]*

STRUCTURE
    @action pass
    START -> __TYPE

    @action pass
    __TYPE ->
        |   __FUNC_TYPE
        |   __TUPL_TYPE
        |   __MAYB_TYPE
        |   __NOVL_TYPE
        |   __STRUCT_TYPE

    @action filter_build :func
    __FUNC_TYPE -> ( :func __TYPE __TYPE )

    @action filter_build :tupl
    __TUPL_TYPE -> ( :tupl __TYPES )

    @action pool
    __TYPES ->
        |   __TYPE __TYPE
        |   __TYPE __TYPES

    @action filter_build :
    __TERM -> ( : TAG __TYPE )

    @action pool
    __TERMS ->
        |   __TERM __TERM
        |   __TERM __TERMS

    @action filter_build :struct
    __STRUCT_TYPE ->
        |   ( :struct __TERM )
        |   ( :struct __TERMS )

    @action filter_build :novl
    __NOVL_TYPE -> ( :novl TAG )

    @action filter_build :mayb
    __MAYB_TYPE ->
        |   ( :mayb __TYPES )
