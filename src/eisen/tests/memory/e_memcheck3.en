struct obj {
    x: int

    create(x: int) -> new self: obj {
        self.x = x
    }
}

struct refs {
    var o: obj

    create(o: obj) -> new self: refs {
        self.o = o
    }
}

fn select_o(mut r: refs, o: obj) {
    let o3 = obj(3)
    select_o(r, o3, o)
}

fn select_o(mut r: refs, oA: obj, oB: obj) {
    r.o = oA
}

fn main() {
    let o1 = obj(1)
    let o2 = obj(2)
    let mut r = refs(o1)

    if (true) {
        r.o = o2
    }
    else {
        let o4 = obj(4)
        r.o = o4
    }

    select_o(r, o2)
    print("%i", r.o.x)
    return
}

/// [Test]
/// name = "e_memcheck3"
/// info = """\
///     tests for simple memory checking with objects
/// """
/// [Expects]
/// success = false
/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 19"
/// [[Expects.Exceptions]]
/// type = "ObjectLifetimeException"
/// contains = ">> 36"
