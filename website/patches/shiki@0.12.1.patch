diff --git a/dist/index.js b/dist/index.js
index a6550d8766240cbefeaf20121c2bbc54536135a3..791636f7f9fda644a49e404f26e0ca5b297ba794 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -250,6 +250,11 @@ const languages = [
     scopeName: "source.dm",
     path: "dream-maker.tmLanguage.json"
   },
+  {
+    id: "eisen",
+    scopeName: "source.eisen",
+    path: "eisen.tmLanguage.json"
+  },
   {
     id: "elixir",
     scopeName: "source.elixir",
diff --git a/languages/eisen.tmLanguage.json b/languages/eisen.tmLanguage.json
new file mode 100644
index 0000000000000000000000000000000000000000..ed0f09c4b74dd20dad00123afb7eced5be955e07
--- /dev/null
+++ b/languages/eisen.tmLanguage.json
@@ -0,0 +1,182 @@
+{
+  "version": "0.0.1",
+  "filetypes": [
+    ".en",
+    ".ei"
+  ],
+  "name": "eisen",
+  "scopeName": "source.eisen",
+  "repository": {
+    "keywords": {
+      "patterns": [
+        {
+          "name": "keyword.control.eisen",
+          "match": "\\b(if|else|while|for|return)\\b"
+        }
+      ]
+    },
+    "strings": {
+      "name": "string.quoted.double.eisen",
+      "begin": "\"",
+      "end": "\"",
+      "patterns": [
+        {
+          "name": "constant.character.escape.eisen",
+          "match": "\\\\."
+        }
+      ]
+    },
+    "comments": {
+      "patterns": [
+        {
+          "comment": "documentation comments",
+          "name": "comment.line.documentation.rust",
+          "match": "^\\s*///.*"
+        },
+        {
+          "comment": "line comments",
+          "name": "comment.line.double-slash.rust",
+          "match": "\\s*//.*"
+        }
+      ]
+    }
+  },
+  "patterns": [
+    {
+      "include": "#keywords"
+    },
+    {
+      "include": "#strings"
+    },
+    {
+      "include": "#comments"
+    },
+    {
+      "comment": "support.function.builtin.eisen",
+      "name": "support.function.builtin.python",
+      "match": "\\b(print|println)\\b"
+    },
+    {
+      "comment": "storage keywords",
+      "name": "keyword.other.rust storage.type.rust",
+      "match": "\\b(mod)\\b"
+    },
+    {
+      "comment": "function/method calls, chaining",
+      "name": "meta.function.call.rust",
+      "begin": "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\()",
+      "beginCaptures": {
+        "1": {
+          "name": "entity.name.function.rust"
+        },
+        "2": {
+          "name": "punctuation.brackets.round.rust"
+        }
+      },
+      "end": "\\)",
+      "endCaptures": {
+        "0": {
+          "name": "punctuation.brackets.round.rust"
+        }
+      },
+      "patterns": [
+        {
+          "include": "#block-comments"
+        },
+        {
+          "include": "#comments"
+        },
+        {
+          "include": "#keywords"
+        },
+        {
+          "include": "#lvariables"
+        },
+        {
+          "include": "#constants"
+        },
+        {
+          "include": "#gtypes"
+        },
+        {
+          "include": "#functions"
+        },
+        {
+          "include": "#lifetimes"
+        },
+        {
+          "include": "#macros"
+        },
+        {
+          "include": "#namespaces"
+        },
+        {
+          "include": "#punctuation"
+        },
+        {
+          "include": "#strings"
+        },
+        {
+          "include": "#types"
+        },
+        {
+          "include": "#variables"
+        }
+      ]
+    },
+    {
+      "name": "keyword.declaration.struct.rust storage.type.rust",
+      "match": "\\b(?<!\\.)(struct|data struct)\\b"
+    },
+    {
+      "comment": "fn",
+      "name": "keyword.other.fn.rust",
+      "match": "\\bfn\\b"
+    },
+    {
+      "comment": "dashrocket, skinny arrow",
+      "name": "keyword.operator.arrow.skinny.rust",
+      "match": "->"
+    },
+    {
+      "comment": "namespace operator",
+      "name": "keyword.operator.namespace.rust",
+      "match": "::"
+    },
+    {
+      "comment": "constant.numeric.eisen",
+      "match": "\\b\\d+(.?\\d*)?\\b",
+      "name": "constant.numeric.python"
+    },
+    {
+      "comment": "assignment operators",
+      "name": "keyword.operator.assignment.rust",
+      "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
+    },
+    {
+      "comment": "single equal",
+      "name": "keyword.operator.assignment.equal.rust",
+      "match": "(?<![<>])=(?!=|>)"
+    },
+    {
+      "comment": "comparison operators",
+      "name": "keyword.operator.comparison.rust",
+      "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
+    },
+    {
+      "comment": "math operators",
+      "name": "keyword.operator.math.rust",
+      "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
+    },
+    {
+      "comment": "storage keywords",
+      "name": "support.function.builtin.python",
+      "match": "\\b(let|var|embed|inherits)\\b"
+    },
+    {
+      "comment": "constant.language.eisen",
+      "match": "\\b(true|false)\\b",
+      "name": "constant.language.python"
+    }
+  ]
+}